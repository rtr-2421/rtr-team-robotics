// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc2421.angleEncoder.commands;
import edu.wpi.first.wpilibj.can.CANTimeoutException;
import edu.wpi.first.wpilibj.command.Command;
import java.lang.Math.*;
import org.usfirst.frc2421.angleEncoder.Robot;
import org.usfirst.frc2421.angleEncoder.RobotMap;
/**
 *
 */
public class AutonomousCommand extends Command {

    boolean finished = false;
    double distanceTraveled;
    static double distance = 4.00;
    
    public AutonomousCommand() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.bigRedButton);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
//        initialValue = Robot.bigRedButton.magEncoder.getRaw() / (cyclePerRev * wheelCircumference);
        // Sets initial value in Previous Line to Distance in Inches
        
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        
        distanceTraveled = Robot.bigRedButton.magEncoder.getDistance() / 12;
                
        if(distanceTraveled < distance){
        try {
            Robot.bigRedButton.cANJaguar1.setX(0.25);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
        }
        if(distanceTraveled >= distance){
            try {
                Robot.bigRedButton.cANJaguar1.setX(0);
            } catch (CANTimeoutException ex) {
                ex.printStackTrace();
            }
            finished = true;
        }
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
//        double value = initialValue - (Robot.bigRedButton.magEncoder.getRaw() / (cyclePerRev * wheelCircumference)); 
        // Sets output of Previous Line to Distance in Inches
//        System.out.println("Angle value = " + value);
//        System.out.println("Distance = " + Robot.bigRedButton.magEncoder.getDistance());
        
//        if(value < 0){
//            value *= -1;
//        }
        
       return finished;
       
       // this would be two rotations
    }
    // Called once after isFinished returns true
    protected void end() {
        try {
            Robot.bigRedButton.cANJaguar1.setX(0);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
        finished = false;
        Robot.bigRedButton.magEncoder.reset();
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        try {
            Robot.bigRedButton.cANJaguar1.setX(0);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
        finished = false;
        Robot.bigRedButton.magEncoder.reset();
    }
}
