// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2421.TankDriveDalek.commands;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.can.CANTimeoutException;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2421.TankDriveDalek.Robot;

/**
 *
 */
public class  driveCommand extends Command {
    
    public Joystick driveStick;
    public double leftSpeed = 0;
    public double rightSpeed = 0;
    final double deadZone = 0.2;

    public driveCommand() {
        
        driveStick = Robot.oi.driveStick;
        
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        
        double x = driveStick.getX();
        double y = driveStick.getY();
        
        if((-deadZone < x) && (x > deadZone) && (-deadZone < y) && (y > deadZone)){
          leftSpeed = 0;
          rightSpeed = 0;
        }
        
        else{
          leftSpeed = y + x;
          rightSpeed = y - x;
        }
        
        if(leftSpeed > 1){
            leftSpeed = 1;
        }
        else if (leftSpeed < -1){
            leftSpeed = -1;
        }
        
        if(rightSpeed > 1){
            rightSpeed = 1;
        }
        else if (rightSpeed < -1){
            rightSpeed = -1;
        }
        
        try {
            Robot.drive.controlMotorL(leftSpeed);
            Robot.drive.controlMotorR(rightSpeed);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
        
        
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
