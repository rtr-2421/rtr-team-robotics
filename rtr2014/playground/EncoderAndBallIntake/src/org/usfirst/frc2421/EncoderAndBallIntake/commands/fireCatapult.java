// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc2421.EncoderAndBallIntake.commands;
import edu.wpi.first.wpilibj.can.CANTimeoutException;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2421.EncoderAndBallIntake.Robot;
import org.usfirst.frc2421.EncoderAndBallIntake.RobotMap;
/**
 *
 */
public class  fireCatapult extends Command {
    
    static int initialValue;
    int catAngle = Robot.catapult.catAngle;
    double motorspeed = Robot.catapult.motorspeed;
    boolean finished = false;
    
    public fireCatapult() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.catapult);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        initialValue = RobotMap.catapultEncoder.getRaw();
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute(){ 
        
        int value = initialValue - RobotMap.catapultEncoder.getRaw();
        value /= 2;
        
        if(value < 0){
            value *= -1;
        }
        
        if(value < catAngle){
        try {
            Robot.catapult.setX(motorspeed);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
        }
        if(value >= catAngle){
            try {
                Robot.catapult.setX(0);
            } catch (CANTimeoutException ex) {
                ex.printStackTrace();
            }
            finished = true;
        }
        
        
//        System.out.println("Encoder Value = " + value);
            
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return finished;
    }
    // Called once after isFinished returns true
    protected void end() {
        try {
            Robot.catapult.setX(0);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
        finished = false;
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        try {
            Robot.catapult.setX(0);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
        finished = false;
    }
}
