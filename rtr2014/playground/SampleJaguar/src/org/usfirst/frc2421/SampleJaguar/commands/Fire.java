// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc2421.SampleJaguar.commands;
import edu.wpi.first.wpilibj.can.CANTimeoutException;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2421.SampleJaguar.Robot;
/**
 *
 */
public class  Fire extends Command {
    public double motorSpeed;
    boolean finished = false;
    public static final double DEADZONE = 0;
    
    public Fire() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    
    
    // Called just before this Command runs the first time
    protected void initialize() {
        
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        if((Robot.motorTest.readEncoder() >= 0 + DEADZONE) && (Robot.motorTest.readEncoder() < 90)){
            motorSpeed = 0.25;
            try {
                Robot.motorTest.setX(motorSpeed);
            } catch (CANTimeoutException ex){
                ex.printStackTrace();
            }
        }
        if(Robot.motorTest.readEncoder() >= 90 + DEADZONE) {
                motorSpeed = 0;
            try {
                Robot.motorTest.setX(motorSpeed);
            } catch (CANTimeoutException ex) {
                ex.printStackTrace();
            }
        }
        /*if(Robot.motorTest.readEncoder() <= 0) {
            motorSpeed = 0;
            try {
                Robot.motorTest.setX(motorSpeed);
            } catch (CANTimeoutException ex) {
                ex.printStackTrace();
            }
        }else{
            System.out.println(Robot.motorTest.readEncoder());
        }*/
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return finished = true;
    }
    // Called once after isFinished returns true
    protected void end() {
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
