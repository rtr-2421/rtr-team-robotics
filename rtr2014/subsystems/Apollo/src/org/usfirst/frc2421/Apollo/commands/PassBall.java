// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2421.Apollo.commands;

import edu.wpi.first.wpilibj.can.CANTimeoutException;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2421.Apollo.Robot;
import org.usfirst.frc2421.Apollo.RobotMap;

/**
 *
 */
public class PassBall extends Command {
    
    private boolean finished = false;
    private boolean hasEjected = false;

    public PassBall() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.ballIntake);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {

    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        ejectBall();
        try {
            Robot.ballIntake.setEjectSpeed(Robot.ballIntake.spinnerSpeed);//Setting the speed to fire ball
            Robot.ballIntake.setIntakeSpeed(-Robot.ballIntake.spinnerSpeed);//Setting the speed to capture ball
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
        
    }
    
    public void ejectBall(){
//        System.out.println("The code is running the method");
        if(!hasEjected){
            
//            System.out.println("It realizes it has not launched");
            if(RobotMap.reseted.get()){
//                System.out.println("The code has sent the voltage");
                Robot.ballIntake.ejectArm(1);
            }
            else if(!RobotMap.reseted.get()){
                Robot.ballIntake.ejectArm(1);
            }
        
            if(RobotMap.eject.get()){
                Robot.ballIntake.stopArm();
                hasEjected = true;
            }
        
        }
        
        else{
            
            if(RobotMap.eject.get()){
                Robot.ballIntake.ejectArm(-1);
            }
            else if(!RobotMap.eject.get()){
                Robot.ballIntake.ejectArm(-1);
            }
            
            if(RobotMap.reseted.get()){
                Robot.ballIntake.stopArm();
                finished = true;
            }
        }
        
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
        try {
            Robot.ballIntake.setEjectSpeed(0);
            Robot.ballIntake.setIntakeSpeed(0);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        try {
            Robot.ballIntake.setEjectSpeed(0);
            Robot.ballIntake.setIntakeSpeed(0);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }

    }
}
