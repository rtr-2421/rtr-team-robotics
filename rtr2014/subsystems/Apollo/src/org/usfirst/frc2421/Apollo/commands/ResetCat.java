// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc2421.Apollo.commands;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.can.CANTimeoutException;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2421.Apollo.Robot;
import org.usfirst.frc2421.Apollo.RobotMap;

/**
 *
 */
public class  ResetCat extends Command {
    
    static int initialValue = RobotMap.catAngle.getRaw();
    double motorspeed = Robot.catapult.fireSpeed;
    Encoder catAngle = RobotMap.catAngle;
    int value;
    boolean finished;
    final double scaleFactor = 0.25;

    public ResetCat() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.catapult);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
        
        //sets an initial raw value
        initialValue = catAngle.getRaw();
        finished = false;
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
       
        try {
            Robot.catapult.setX(-motorspeed * scaleFactor);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
        
        //gets the angle of the encoder
        int value = initialValue - catAngle.getRaw();
        value /= 2;
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
        try {
            Robot.catapult.setX(0);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        try {
            Robot.catapult.setX(0);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
    }
}
