// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc2421.Apollo.subsystems;

import org.usfirst.frc2421.Apollo.RobotMap;
import org.usfirst.frc2421.Apollo.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; 
//import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.can.*;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Drive extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANJaguar leftDrive = RobotMap.driveleftrive;
    CANJaguar rightDrive = RobotMap.driverightDrive;
    Encoder leftQuadEncoder = RobotMap.leftWheelEncoder;
    Encoder rightQuadEncoder = RobotMap.rightWheelEncoder;
    AnalogChannel distanceSensor = RobotMap.ultrasonicRangeFinder;
    DigitalInput photoSensor = RobotMap.drivephotoSensor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public void controlMotorL(double lMotorPower) throws CANTimeoutException{ 
        leftDrive.setX(lMotorPower);
    }
    
    //Sets the speed of the right motor.
    public void controlMotorR(double rMotorPower) throws CANTimeoutException{
        rightDrive.setX(rMotorPower);
    }
    
    //converts the voltage to inches

    public double readUltrasonic(){
        return distanceSensor.getAverageVoltage() * 8.8573;   
    }
    
    public void setX(double speed) {
      try {
          leftDrive.setX(speed);
          rightDrive.setX(speed);
      } catch(CANTimeoutException ex) {
         System.out.println("Motor no worky");
      }      
  }   
 
    
//sets motor speed based on light sensor state
    public boolean getSensor() {
        return photoSensor.get();
    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
        
        
        
        
        
        
    }
}

