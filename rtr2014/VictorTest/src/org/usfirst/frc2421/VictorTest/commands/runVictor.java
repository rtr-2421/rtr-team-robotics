// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc2421.VictorTest.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2421.VictorTest.Robot;

/**
 *
 */
public class  runVictor extends Command {

    public runVictor() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.ballEject);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    
    // Called just before this Command runs the first time
    protected void initialize() {
        Robot.ballEject.setEject();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        ejectBall();
        resetEjector();
    }
    
    public void ejectBall(){
        while (!Robot.ballEject.reject()) {
            Robot.ballEject.setEject();
        }
        Robot.ballEject.stop();
    }
    
    public void resetEjector(){
        while (!Robot.ballEject.finished()) {
            Robot.ballEject.setReset();
        }
        Robot.ballEject.stop();
        
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return true;
    }

    // Called once after isFinished returns true
    protected void end() {
        Robot.ballEject.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        while (!Robot.ballEject.finished()) { // Add limit/timeout
            Robot.ballEject.setEject();
        }
    }
}
