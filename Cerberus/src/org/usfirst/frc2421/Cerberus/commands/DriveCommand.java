package org.usfirst.frc2421.Cerberus.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc2421.Cerberus.Robot;

/**
 *
 */
public class DriveCommand extends Command {

	public DriveCommand() {
		// Use requires() here to declare subsystem dependencies
		// eg. requires(chassis);
		requires(Robot.driveSystem);
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		double deadZone = 0.2;

		double x = Robot.oi.driveStick.getX();
		double y = Robot.oi.driveStick.getY();
		double w = Robot.oi.turnStick.getX();

		double a = 0;
		double b = 1;

		double speed_m1;
		double speed_m2;
		double speed_m3;
		double speed_m4;

		if ((x < deadZone && x > -deadZone) && (y < deadZone && y > -deadZone) && (w < deadZone && w > -deadZone)) {
			speed_m1 = 0;
			speed_m2 = 0;
			speed_m3 = 0;
			speed_m4 = 0;
		} else {
			speed_m1 = x + y - w * (a + b);
			speed_m2 = -x + y + w * (a + b);
			speed_m3 = -x + y - w * (a + b);
			speed_m4 = x + y + w * (a + b);
		}

		if (speed_m1 > 1) {
			speed_m1 = 1;
		}
		if (speed_m1 < -1) {
			speed_m1 = -1;
		}

		if (speed_m2 > 1) {
			speed_m2 = 1;
		}
		if (speed_m2 < -1) {
			speed_m2 = -1;
		}

		if (speed_m3 > 1) {
			speed_m3 = 1;
		}
		if (speed_m3 < -1) {
			speed_m3 = -1;
		}

		if (speed_m4 > 1) {
			speed_m4 = 1;
		}
		if (speed_m4 < -1) {
			speed_m4 = -1;
		}

		Robot.driveSystem.setSpeedFrontLeftMotor(-speed_m1);
		Robot.driveSystem.setSpeedFrontRightMotor(speed_m2);
		Robot.driveSystem.setSpeedBackLeftMotor(-speed_m3);
		Robot.driveSystem.setSpeedBackRightMotor(speed_m4);
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}
}
