// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2421.Cerberus.subsystems;

import org.usfirst.frc2421.Cerberus.RobotMap;
import org.usfirst.frc2421.Cerberus.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class roboSystem extends Subsystem {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	Encoder frontLeftEnc = RobotMap.roboSystemfrontLeftEnc;
	Encoder backLeftEnc = RobotMap.roboSystembackLeftEnc;
	Encoder frontRightEnc = RobotMap.roboSystemfrontRightEnc;
	Encoder backRightEnc = RobotMap.roboSystembackRightEnc;

	CANJaguar frontLeft = RobotMap.roboSystemfrontLeft;
	CANJaguar backLeft = RobotMap.roboSystembackLeft;
	CANJaguar frontRight = RobotMap.roboSystemfrontRight;
	CANJaguar backRight = RobotMap.roboSystembackRight;

	public PIDController pid1 = new PIDController(1, 0, 0, 0.1, frontLeftEnc,
			frontLeft);
	public PIDController pid2 = new PIDController(1, 0, 0, 0.1, frontRightEnc,
			frontRight);
	public PIDController pid3 = new PIDController(1, 0, 0, 0.1, backLeftEnc,
			backLeft);
	public PIDController pid4 = new PIDController(1, 0, 0, 0.1, backRightEnc,
			backRight);

	Gyro gyro = RobotMap.roboSystemgyro;

	AnalogAccelerometer acc = RobotMap.roboSystemacc;

	AnalogInput ult = RobotMap.ultraSonic;

	public void setSpeedFrontLeftMotor(double speed) {
		frontLeft.set(speed);
	}

	public void setSpeedBackLeftMotor(double speed) {
		backLeft.set(speed);
	}

	public void setSpeedFrontRightMotor(double speed) {
		frontRight.set(speed);
	}

	public void setSpeedBackRightMotor(double speed) {
		backRight.set(speed);
	}

	public void setAllMotorsToSpeed(double speed) {
		frontLeft.set(speed);
		backLeft.set(speed);
		frontRight.set(speed);
		backRight.set(speed);
	}

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	public double getUltRange() {
		double dist = ult.getAverageVoltage() * 8.3333;
		double volt = ult.getAverageVoltage();
		double volt1 = ult.getAverageVoltage();
		
		double distInches = dist * 12;
		double distFeet = dist;
		double distFeet2 = ((volt1 * 0.10 * 1000) + 0.3);
		
		System.out.println("Distance (in): " + dist * 12);
		System.out.println("Distance (ft): " + dist);
		System.out.println("Voltage (V): " + volt);
		System.out.println("Distance (in test): "
				+ ((volt1 * 0.10 * 1000) + 0.3));
		return distFeet2;
	}
}
