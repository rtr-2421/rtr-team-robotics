// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2421.Cerberus.subsystems;

import org.usfirst.frc2421.Cerberus.RobotMap;
import org.usfirst.frc2421.Cerberus.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class roboSystem extends Subsystem {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	Encoder frontLeftEnc = RobotMap.roboSystemfrontLeftEnc;
	Encoder backLeftEnc = RobotMap.roboSystembackLeftEnc;
	Encoder frontRightEnc = RobotMap.roboSystemfrontRightEnc;
	Encoder backRightEnc = RobotMap.roboSystembackRightEnc;

	CANJaguar frontLeft = RobotMap.roboSystemfrontLeft;
	CANJaguar backLeft = RobotMap.roboSystembackLeft;
	CANJaguar frontRight = RobotMap.roboSystemfrontRight;
	CANJaguar backRight = RobotMap.roboSystembackRight;
	
	public double kP = 0.001;
    public double kI = 0;
    public double kD = 0.001;

	public PIDController pid1 = new PIDController(kP, kI, kD, frontLeftEnc, new PIDJaguar(frontLeft));
	public PIDController pid2 = new PIDController(kP, kI, kD, frontRightEnc, new PIDJaguar(frontRight));
	public PIDController pid3 = new PIDController(kP, kI, kD, backLeftEnc, new PIDJaguar(backLeft));
	public PIDController pid4 = new PIDController(kP, kI, kD, backRightEnc, new PIDJaguar(backRight));
    
    double scale1 = -80;
    double scale2 = -80;
    double scale3 = -80;
    double scale4 = -80;

	Gyro gyro = RobotMap.roboSystemgyro;

	BuiltInAccelerometer acc = RobotMap.roboSystemacc;

	AnalogInput ult = RobotMap.ultraSonic;

	public void setSpeedFrontLeftMotor(double speed) {
		pid1.setSetpoint(speed*scale1);
	}

	public void setSpeedBackLeftMotor(double speed) {
		pid3.setSetpoint(speed*scale3);
	}

	public void setSpeedFrontRightMotor(double speed) {
		pid2.setSetpoint(speed*scale2);
	}

	public void setSpeedBackRightMotor(double speed) {
		pid4.setSetpoint(speed*scale4);
	}

	public void setAllMotorsToSpeed(double speed) {
		setSpeedFrontLeftMotor(speed);
		setSpeedBackLeftMotor(speed);
		setSpeedFrontRightMotor(speed);
		setSpeedBackRightMotor(speed);
	}
	
	public void pidEnable(){
    	pid1.setInputRange(scale1, -scale1);
    	pid2.setInputRange(scale2, -scale2);
    	pid3.setInputRange(scale3, -scale3);
    	pid4.setInputRange(scale4, -scale4);
    	
    	pid1.setOutputRange(-1, 1);
    	pid2.setOutputRange(-1, 1);
    	pid3.setOutputRange(-1, 1);
    	pid4.setOutputRange(-1, 1);
    	
    	pid1.enable();
    	pid2.enable();
    	pid3.enable();
    	pid4.enable();
    }

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	public double getUltRange() {
		double dist = ult.getAverageVoltage() * 8.3333;
		double volt = ult.getAverageVoltage();
		double volt1 = ult.getAverageVoltage();
		
		double distInches = dist * 12;
		double distFeet = dist;
		double distFeet2 = ((volt1 * 0.10 * 1000) + 0.3);
		
		System.out.println("Distance (in): " + dist * 12);
		System.out.println("Distance (ft): " + dist);
		System.out.println("Voltage (V): " + volt);
		System.out.println("Distance (in test): "
				+ ((volt1 * 0.10 * 1000) + 0.3));
		return distFeet2;
	}
}
