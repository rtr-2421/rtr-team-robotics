// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2421.Cerberus.subsystems;

import java.util.Random;

import org.usfirst.frc2421.Cerberus.Robot;
import org.usfirst.frc2421.Cerberus.RobotMap;
import org.usfirst.frc2421.Cerberus.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class Drive extends Subsystem {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	Encoder frontLeftEnc = RobotMap.roboSystemfrontLeftEnc;
	Encoder backLeftEnc = RobotMap.roboSystembackLeftEnc;
	Encoder frontRightEnc = RobotMap.roboSystemfrontRightEnc;
	Encoder backRightEnc = RobotMap.roboSystembackRightEnc;

	CANJaguar frontLeft = RobotMap.roboSystemfrontLeft;
	CANJaguar backLeft = RobotMap.roboSystembackLeft;
	CANJaguar frontRight = RobotMap.roboSystemfrontRight;
	CANJaguar backRight = RobotMap.roboSystembackRight;
	
	public double kP = 0.0005;//Originally 0.001
    public double kI = 0;
    public double kD = 0.001;
    
	double speedScale = 0.5;

	Gyro gyro = RobotMap.roboSystemgyro;

	BuiltInAccelerometer acc = RobotMap.roboSystemacc;

	AnalogInput ult = RobotMap.ultraSonic;
	
	
	public void setSpeedFrontLeftMotor(double speed) {
		frontLeft.set(speedScale*speed);
	}

	public void setSpeedBackLeftMotor(double speed) {
		backLeft.set(speedScale*speed);
	}

	public void setSpeedFrontRightMotor(double speed) {
		frontRight.set(speedScale*speed);
	}

	public void setSpeedBackRightMotor(double speed) {
		backRight.set(speedScale*speed);
	}

	public void setAllMotorsToSpeed(double speed) {
		setSpeedFrontLeftMotor(-speed);
		setSpeedBackLeftMotor(-speed);
		setSpeedFrontRightMotor(speed);
		setSpeedBackRightMotor(speed);
	}
	

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
	public void setDirection(double x, double y){
		double w = 0;

		double a = 0;
		double b = 1;

		double speed_m1;
		double speed_m2;
		double speed_m3;
		double speed_m4;
		
		speed_m1 = 0;
		speed_m2 = 0;
		speed_m3 = 0;
		speed_m4 = 0;
			
		speed_m1 = x + y - w * (a + b);
		speed_m2 = -x + y + w * (a + b);
		speed_m3 = -x + y - w * (a + b);
		speed_m4 = x + y + w * (a + b);

		if (speed_m1 > 1) {
			speed_m1 = 1;
		}
		if (speed_m1 < -1) {
			speed_m1 = -1;
		}

		if (speed_m2 > 1) {
			speed_m2 = 1;
		}
		if (speed_m2 < -1) {
			speed_m2 = -1;
		}

		if (speed_m3 > 1) {
			speed_m3 = 1;
		}
		if (speed_m3 < -1) {
			speed_m3 = -1;
		}

		if (speed_m4 > 1) {
			speed_m4 = 1;
		}
		if (speed_m4 < -1) {
			speed_m4 = -1;
		}

		Robot.driveSystem.setSpeedFrontLeftMotor(-speed_m1);
		Robot.driveSystem.setSpeedFrontRightMotor(speed_m2);
		Robot.driveSystem.setSpeedBackLeftMotor(-speed_m3);
		Robot.driveSystem.setSpeedBackRightMotor(speed_m4);
	}
	
	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
		setDefaultCommand(new DriveCommand());
	}

	public double getUltRange() {
		double dist = ult.getAverageVoltage() * 8.3333;
		double volt = ult.getAverageVoltage();
		double volt1 = ult.getAverageVoltage();
		
		double distInches = dist * 12;
		//double distFeet = dist;
		//double distFeet2 = ((volt1 * 0.10 * 1000) + 0.3);
		
		System.out.println("Distance (in): " + dist * 12);
		System.out.println("Distance (ft): " + dist);
		System.out.println("Voltage (V): " + volt);
		System.out.println("Distance (in test): "
				+ ((volt1 * 0.10 * 1000) + 0.3));
		return distInches;
	}
	
	public double getUltRange(double d) {
		double r = (double) new Random().nextInt(10);
		return r;
	}
}
