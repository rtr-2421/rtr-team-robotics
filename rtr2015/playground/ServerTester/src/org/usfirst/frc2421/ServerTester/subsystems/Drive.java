// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2421.ServerTester.subsystems;

import java.util.Random;

import org.usfirst.frc2421.ServerTester.RobotMap;
import org.usfirst.frc2421.ServerTester.commands.*;

import edu.wpi.first.wpilibj.CANJaguar;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Drive extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANJaguar jag1 = RobotMap.drivejag1;
    CANJaguar jag2 = RobotMap.drivejag2;
    CANJaguar jag3 = RobotMap.drivejag3;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    double speedScale = 0.5;
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void setSpeedFrontLeftMotor(double speed) {
		jag1.set(speedScale*speed);
	}

	public void setSpeedBackLeftMotor(double speed) {
		jag3.set(speedScale*speed);
	}

	public void setSpeedFrontRightMotor(double speed) {
		jag2.set(speedScale*speed);
	}
	
	public void setSpeedBackRightMotor(double speed){
		
	}

	public void setAllMotorsToSpeed(double speed) {
		setSpeedFrontLeftMotor(-speed);
		setSpeedBackLeftMotor(-speed);
		setSpeedFrontRightMotor(speed);
		setSpeedBackRightMotor(speed);
	}
	
	public void setDirection(double x, double y){
		double w = 0;

		double a = 0;
		double b = 1;

		double speed_m1;
		double speed_m2;
		double speed_m3;
		double speed_m4;
		
		speed_m1 = 0;
		speed_m2 = 0;
		speed_m3 = 0;
		speed_m4 = 0;
			
		speed_m1 = x + y - w * (a + b);
		speed_m2 = -x + y + w * (a + b);
		speed_m3 = -x + y - w * (a + b);
		speed_m4 = x + y + w * (a + b);

		if (speed_m1 > 1) {
			speed_m1 = 1;
		}
		if (speed_m1 < -1) {
			speed_m1 = -1;
		}

		if (speed_m2 > 1) {
			speed_m2 = 1;
		}
		if (speed_m2 < -1) {
			speed_m2 = -1;
		}

		if (speed_m3 > 1) {
			speed_m3 = 1;
		}
		if (speed_m3 < -1) {
			speed_m3 = -1;
		}

		if (speed_m4 > 1) {
			speed_m4 = 1;
		}
		if (speed_m4 < -1) {
			speed_m4 = -1;
		}

		setSpeedFrontLeftMotor(-speed_m1);
		setSpeedFrontRightMotor(speed_m2);
		setSpeedBackLeftMotor(-speed_m3);
		setSpeedBackRightMotor(speed_m4);
	}
    
	public double getUltRange(double d){
		double r = (double)new Random().nextInt(10);
		return r;
	}
	
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
}

